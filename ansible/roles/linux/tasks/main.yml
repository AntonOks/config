---
- import_tasks: ../arch/main.yml
  when: ansible_os_family == 'Archlinux'
  tags:
    - install-archlinux-packages
- import_tasks: ../debian/main.yml
  when: ansible_os_family == 'Debian' or ansible_os_family == 'Pop!_OS'
  tags:
    - install-debian-packages

- name: Ensure binaries temporarily folder exists
  file:
    path: "{{ HOME }}/binaries"
    state: directory

- name: Initializing binaries
  unarchive:
    src: "{{ item.link }}"
    dest: "/usr/local/bin"
    remote_src: yes
  with_items: "{{ binaries }}"
  when: item.direct is defined
  register: download_direct_binary
  until: download_direct_binary is successful

- name: Downloading binaries
  unarchive:
    src: "{{ item.link }}"
    dest: "{{ HOME }}/binaries"
    remote_src: yes
  with_items: "{{ binaries }}"
  when: item.direct is not defined
  register: download_binary
  until: download_binary is successful

- name: Downloading plain compressed binaries
  get_url:
    url: "{{ item.link }}"
    dest: "{{ HOME }}/binaries/{{ item.name }}-linux.gz"
  with_items: "{{ binaries_gz }}"
  when: item.direct is not defined
  register: download_gz_binary
  until: download_gz_binary is successful

- name: Executing binaries command
  shell: "{{ item.command }}"
  when:
    - item.direct is not defined
    - download_binary.changed
    - item.command is defined
  with_items: "{{ binaries }}"
  args:
    chdir: "{{ HOME }}/binaries"
  register: cmd_binary
  until: cmd_binary is successful

- name: Executing plain compressed binaries command
  shell: "{{ item.command }}"
  when:
    - item.direct is not defined
    - download_gz_binary.changed
    - item.command is defined
  with_items: "{{ binaries_gz }}"
  args:
    chdir: "{{ HOME }}/binaries"
  register: cmd_gz_binary
  until: cmd_gz_binary is successful

- name: Install binaries
  copy:
    src: "{{ HOME }}/binaries/{{ item.name }}"
    dest: "/usr/local/bin/{{ item.name }}"
    mode: u+x
    remote_src: yes
  with_items: "{{ binaries }}"
  register: install_binary
  until: install_binary is successful
  when: item.direct is not defined and download_binary.changed

- name: Install plain compressed binaries
  copy:
    src: "{{ HOME }}/binaries/{{ item.name }}"
    dest: "/usr/local/bin/{{ item.name }}"
    mode: u+x
    remote_src: yes
  with_items: "{{ binaries_gz }}"
  register: install_gz_binary
  until: install_gz_binary is successful
  when: item.direct is not defined and download_gz_binary.changed

- name: Cleanup installed folder
  shell: rm -rf *.md LICENSE
  args:
    chdir: "/usr/local/bin"
  register: cleanup_binaries
  until: cleanup_binaries is successful

# Docker Post-installation steps
- name: Create docker group
  group:
    name: "docker"
    state: present
  register: docker_post_step_1
  until: docker_post_step_1 is successful

- name: Adding user {{ USER }} to docker group
  become: true
  become_user: root
  user:
    name: "{{ USER }}"
    group: "docker"
    append: "yes"
  register: docker_post_step_2
  until: docker_post_step_2 is successful
  when: docker_post_step_1.changed

- name: Apply group change of docker
  shell: newgrp docker
  register: docker_post_step_3
  until: docker_post_step_3 is successful
  when: docker_post_step_2.changed
